why a line graph to represent Alice speaking throughout text?
    use a line graph to show a connected phenomena over time or over a sequence
    (shocking revelation Ch. 10 and 11 ... no Alice speech)

Title and Axis Labels are key for understanding graphs!

Show how to make/plot axis and gridlines: (not by hand!)

1. document analysis...
    open in outline view 
    find in hierarchy the elements wanting to drill down into (<q> and <q> spoken by Alice)

generally we write one template match for a SVG; however, can have multiple matches. 
for this example will use for-each to make all of the SVG come thru in one match

2. edit namespace for XSLT to work with XML input (especially if TEI!!!) and SVG (xmlns="http://www.w3.org/2000/svg")
default to XML output --> <xsl:output method="xml" indent="yes"/> because SVG with XSLT just comes out as XML

3. match on document node since altering the entire XML document to output something unique (the SVG)

4. first need to figure out how large of a graph we need (how long is the x and y axises)
        figure this out by having a ball park sense of the largest value on both axises
        think about space between points and the number of points needed to plot
        space between points and maximum value of the points
        
5. defining global variables (defined up high outside of template rules so available in any template rule following)
   use comment tags as reminders of what things are!
   
   can use the global variables to test xpath expressions (since XPath window isn't available in XSLT view) when you name the variable don't use the dollar sign you only use the dollar sign to call on the varaible later
   
   then write a comment  (xsl:comment) in the template rule that calls on the global variable -- this leaves an XML comment in the output SVG file
   <xsl:variable name="numChapters" select="count(//chapter)"/>  --- global variable 
   <xsl:comment>The total number of chapters is <xsl:value-of select="$numChapters"/>.</xsl:comment> -- calling on variable in document node template match
   <!--The total number of chapters is 12.--> --- comment in output SVG
   
   defining variables to calculate points on X-axis:
   <xsl:variable name="numChapters" select="count(//chapter)"/>   
   <xsl:variable name="xSpacer" select="70"/>
   <xsl:variable name="max_Xval" select="$numChapters * $xSpacer"/> -- uses arithmetic 
   
   defining variables to calculate points on X-axis:
   <xsl:variable name="maxSpeeches" select="max(//chapter/count(descendant::q[@sp='alice']))"/> --- thinking thru this: count the number of Alice speeches in each chapter so for every chapter you get a count of the q elements (this will get you 12 different counts -- one count for each chapter) then to see the highest one of those use the max function around all of it. This shows us the biggest y-value (without the added space between points)
   <xsl:variable name="Yspacer" select="10"/>
   <xsl:variable name="max_Yval" select="$maxSpeeches * $Yspacer"/>
   
   outputing the values of the global variables in a comment tag helped to see the values we are working with when we start plotting

6. NOW TO PLOT!

Displace 0 so there are margins around the graph is done with Transform Translate

inside the document node match write out SVG tags

svg with a desiginated width and height -- generally we use 100% for both
then the internal g that groups everything
on this g we write the transform translate (can also take rotate to turn graph)
 <svg width="100%" height="100%">        
        <g transform="translate(50 750)" > so now 0,0 is sitting at the 50 750 mark on the screen
        note will need to use the negative number to move up the screen


Getting the lines between points:
for each circle (plotting the count for each chapter) then to draw the line need a new variable inside the for-each that is counting to look at the following-sibling chapter so the x1 y1 of the line is the current chapter circle and x2 y2 of the line is on the next circle
    

